// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id                             String                           @id @default(cuid())
    name                           String?
    email                          String?                          @unique
    emailVerified                  DateTime?
    image                          String?
    accounts                       Account[]
    sessions                       Session[]
    SavedExamQuestonAndUserAnswers SavedExamQuestonAndUserAnswers[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Exam {
    id        String     @id @default(cuid())
    name      String
    createdAt DateTime   @default(now())
    updatedAt DateTime   @updatedAt
    questions Question[]
    success   Int        @default(0)
    failure   Int        @default(0)
}

model Question {
    id                             String                           @id @default(cuid())
    body                           String
    answers                        Answer[]
    createdAt                      DateTime                         @default(now())
    updatedAt                      DateTime                         @updatedAt
    examId                         String
    exam                           Exam                             @relation(fields: [examId], references: [id], onDelete: Cascade)
    SavedExamQuestonAndUserAnswers SavedExamQuestonAndUserAnswers[]
    reportCount                    Int                              @default(0)
}

model Answer {
    identifier                     String                           @id @default(cuid())
    body                           String
    questionId                     String
    answerCount                    Int                              @default(0)
    question                       Question                         @relation(fields: [questionId], references: [id], onDelete: Cascade)
    isCorrect                      Boolean                          @default(false)
    reportCount                    Int                              @default(0)
    SavedExamQuestonAndUserAnswers SavedExamQuestonAndUserAnswers[]

    @@unique([identifier])
}

model SavedExamQuestonAndUserAnswers {
    id         String   @id @default(cuid())
    sessionId  String
    questionId String
    answerId   String
    userId     String
    question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
    answer     Answer   @relation(fields: [answerId], references: [identifier], onDelete: Cascade)
    user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
